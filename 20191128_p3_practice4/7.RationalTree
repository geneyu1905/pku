#include <iostream>
#include <string>
#include <cmath>
using namespace std;
char leftRight1[50] = { '0' };
char leftRight2[50] = { '0' };
int findRoot(int a, int b, int count1)
{
	if (a == 1 && b == 1)return count1;
	if (a < b)
	{
		leftRight1[count1] = 'L';
		return findRoot(a, b - a, count1 + 1);
	}
	else
	{
		leftRight1[count1] = 'R';
		return findRoot(a - b, b, count1 + 1);
}
}
double findNumber(double num, int a, int b)
{
	if (a == b)
	{
		if (leftRight2[a] == 'L')return num - 0.5;
		else return num + 0.5;
	}
	if (leftRight2[a] == 'L') return findNumber(num - pow(2,double(b-a-1)), a + 1, b);
	else return findNumber(num + pow(2,double(b-a-1)), a + 1, b);
}

int main()
{
	int total = 0;
	int a, b;
	cin >> total;
	for (int z = 0; z < total; z++)
	{
		cin >> a >> b;
		memset(leftRight1, '0', sizeof(leftRight1));
		memset(leftRight2, '0', sizeof(leftRight2));
		int n = findRoot(a, b, 0);
		int sum = 0;
		for (int i = 0; i < n; i++)
		{
			sum += pow(2, double(i));
			leftRight2[n - 1 - i] = leftRight1[i];
		}
		int fin = findNumber((pow(2, double(n))+1)/2,0, n - 1);
		cout << sum + fin << endl;
	}
}
